import { useState, useEffect } from "react";

export default function InfiniteScroll() {
  const [items, setItems] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);

  // Fetch items from fake API
  const fetchItems = async () => {
    setLoading(true);
    try {
      const res = await fetch(
        `https://jsonplaceholder.typicode.com/posts?_limit=10&_page=${page}`
      );
      const data = await res.json();
      setItems((prev) => [...prev, ...data]); // append new data
    } catch (err) {
      console.error("Error fetching data:", err);
    } finally {
      setLoading(false);
    }
  };

  // Load data whenever "page" changes
  useEffect(() => {
    fetchItems();
  }, [page]);

  // Scroll event listener
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + window.scrollY >= document.body.scrollHeight - 200 &&
        !loading
      ) {
        setPage((prev) => prev + 1); // load next page
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [loading]);

  return (
    <div style={{ padding: "20px" }}>
      <h2>ðŸ“œ Infinite Scrolling Example</h2>

      {items.map((item) => (
        <div
          key={item.id}
          style={{
            padding: "15px",
            margin: "10px 0",
            border: "1px solid #ccc",
            borderRadius: "5px",
            background: "#f9f9f9",
          }}
        >
          <h3>{item.title}</h3>
          <p>{item.body}</p>
        </div>
      ))}

      {loading && <p style={{ textAlign: "center" }}>Loading more...</p>}
    </div>
  );
}
